#! /bin/bash
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# cpu-usage: monitor the CPU consumption of the threads of a process.
#
# Copyright (C) 2021 Christophe BLAESS <christophe.blaess@logilin.fr>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. 
#

Version=0.4

Refresh_delay=2
Process_PID=1

main()
{
	parse_command_line_args $@

	get_list_of_threads_to_monitor

	get_count_of_online_cpu

	get_current_cpu_ticks
	get_current_threads_ticks

	store_current_cpu_ticks_as_previous
	store_current_threads_ticks_as_previous

	while true
	do
		sleep "${Refresh_delay}"

		get_current_cpu_ticks
		get_current_threads_ticks

		compute_delta_cpu_ticks
		compute_threads_consumptions

		store_current_cpu_ticks_as_previous
		store_current_threads_ticks_as_previous

		display_threads_consumptions
	done
}



parse_command_line_args()
{
	OPTIND=0
	local opt
	while getopts ":hn:v" opt
	do
		case ${opt} in
			h)
				display_script_usage; exit 0
				;;
			n)
				Refresh_delay=$((${OPTARG}))
				;;
			v)
				display_script_version; exit 0
				;;
			:)
				echo "Missing argument for -$OPTARG option" >&2
				exit 1
				;;
			?)
				echo "Invalid option: -$OPTARG" >&2
				exit 1
				;;
		esac
	done

	shift $((OPTIND - 1))
	if [ $# -ne 1 ]
	then
		echo "$0: missing PID." >&2
		exit 1
	fi

	Proc_PID="${1}"
}



display_script_usage()
{
	echo "Usage: $0 [option] <pid>" >&2
	echo "Display the current CPU consumption (user/kernel) of the threads of a process." >&2
	echo "Options: " >&2
	echo "  -h          This help" >&2
	echo "  -v          Display the version" >&2
	echo "  -n <delay>  Set the display refresh value in sec." >&2
}



display_script_version()
{
	echo "$0 v.${Version}" >&2
	echo "Copyright (c) 2021 Christophe BLAESS" >&2
	echo "License GPLv2: GNU GPL version 2 or later <https://gnu.org/licenses/gpl.html>." >&2
	echo "This is free software: you are free to change and redistribute it." >&2
	echo "There is NO WARRANTY, to the extent permitted by law." >&2
}



get_list_of_threads_to_monitor()
{
	if ! cd /proc/"${Proc_PID}"/task >/dev/null 2>&1
	then
		echo "$0: ${Proc_PID} is not a valid PID" >&2
		exit 1
	fi

	Threads_list=$( echo *)
}



get_count_of_online_cpu()
{
	CPU_count=$(cat /proc/stat | grep ^cpu[0-9]| wc -l)
}



get_current_cpu_ticks()
{
	local n=0

	while [ ${n} -lt ${CPU_count} ]
	do
		Current_cpu_tick[$n]=$(awk '(NR=='$((n + 2))'){print $2+$3+$4+$5}' < /proc/stat)
		n=$((n+1))
	done
}



compute_delta_cpu_ticks()
{
	local n=0

	while [ ${n} -lt ${CPU_count} ]
	do
		Delta_cpu_tick[$n]=$((${Current_cpu_tick[$n]} - ${Previous_cpu_tick[$n]}))
		n=$((n+1))
	done
}



store_current_cpu_ticks_as_previous()
{
	local n=0

	while [ ${n} -lt ${CPU_count} ]
	do
		Previous_cpu_tick[$n]=${Current_cpu_tick[$n]}
		n=$((n+1))
	done
}



get_current_threads_ticks()
{
	local n=0
	local thr

	for thr in ${Threads_list}
	do
		if [ ! -d "/proc/"${Proc_PID}"/task/${thr}" ]; then exit 0; fi
		Task_cpu[$n]=$(awk '{print $39}' < /proc/"${Proc_PID}"/task/${thr}/stat)
		Current_user_ticks[$n]=$(awk '{print $14}' < /proc/"${Proc_PID}"/task/${thr}/stat)
		Current_kernel_ticks[$n]=$(awk '{print $15}' < /proc/"${Proc_PID}"/task/${thr}/stat)
		n=$((n+1))
	done
}



store_current_threads_ticks_as_previous()
{
	local n=0
	local thr

	for thr in ${Threads_list}
	do
		Previous_user_ticks[$n]=${Current_user_ticks[$n]}
		Previous_kernel_ticks[$n]=${Current_kernel_ticks[$n]}
		n=$((n+1))
	done
}



compute_threads_consumptions()
{
	local n=0
	local thr
	local user_delta
	local kernel_delta

	for thr in ${Threads_list}
	do
		user_delta=$((${Current_user_ticks[$n]} - ${Previous_user_ticks[$n]}))
		kernel_delta=$((${Current_kernel_ticks[$n]} - ${Previous_kernel_ticks[$n]}))
		User_task_percent[$n]=$((${user_delta} * 100 / ${Delta_cpu_tick[${Task_cpu[$n]}]}))
		Kernel_task_percent[$n]=$((${kernel_delta} * 100 / ${Delta_cpu_tick[${Task_cpu[$n]}]}))
		n=$((n+1))
	done
}



display_threads_consumptions()
{
	local n=0
	local thr

	for thr in ${Threads_list}
	do
		printf "%d: %d/%d, " $thr ${User_task_percent[$n]} ${Kernel_task_percent[$n]}
		n=$((n + 1))
	done
	printf "\n"
}



main $@
